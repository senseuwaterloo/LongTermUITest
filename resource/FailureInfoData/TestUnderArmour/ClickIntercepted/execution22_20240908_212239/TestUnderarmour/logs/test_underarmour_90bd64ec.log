2024-09-08 21:22:58,525 - ERROR - Test test_underarmour_90bd64ec failed.
2024-09-08 21:22:58,527 - ERROR - URL at failure: https://www.underarmour.com/en-us/c/girls/clothing/bottoms/training/?prefn1=size&prefv1=YXL
2024-09-08 21:22:58,528 - ERROR - Exception: self = <test.test_underarmour.TestUnderarmour object at 0x105d63520>

    def test_underarmour_90bd64ec(self):
        # self.driver.get("https://www.underarmour.com/en-us/")
        # self.driver.find_element(By.XPATH, "//a[@id='kids']/span[1]").click()
        kids_menu_button = self.driver.find_element(By.XPATH, "//a[@data-testid='nav-link-kids']").get_native_element()
        action = ActionChains(self.driver)
        action.move_to_element(kids_menu_button).perform()
    
        # self.driver.find_element(By.ID, "girls-clothing-bottoms").click()
        self.driver.find_element(By.XPATH, "//div[@id='kids']//a[text()='Pants & Leggings' and contains(@href, 'girls')]").click()
    
        if self.driver.find_element(By.XPATH, "//dialog[@data-testid='user-action-modal']//button[@data-testid='dialog-close-button']") is not None:
            self.driver.find_element(By.XPATH, "//dialog[@data-testid='user-action-modal']//button[@data-testid='dialog-close-button']").click()
    
        # self.driver.find_element(By.XPATH, "//main[@id='maincontent']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[3]/div[1]").click()
        self.driver.find_element(By.XPATH, "//div[@id='product-refinements']//h3[@data-testid='refinement-option' and text()='Sports']").click()
    
        # self.driver.find_element(By.XPATH, "//a[contains(text(),'Training')]").click()
        self.driver.find_element(By.XPATH, "//div[@id='product-refinements']//a[text()='Training' and @title='Refine by sports: Training']").click()
        self.driver.find_element(By.XPATH, "//div[@id='product-refinements']//h3[@data-testid='refinement-option' and contains(text(), 'Sports')]").click()
    
        # self.driver.find_element(By.XPATH, "//main[@id='maincontent']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[5]/div[1]").click()
        # selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame
        time.sleep(2)
        self.driver.find_element(By.XPATH, "//div[@id='product-refinements']//h3[@data-testid='refinement-option' and text()='Size']").click()
    
        # self.driver.find_element(By.XPATH, "//a[contains(text(),'YXL')]").click()
        self.driver.find_element(By.XPATH, "//div[@id='product-refinements']//a[text()='YXL' and @title='Refine by size: YXL']").click()
        self.driver.find_element(By.XPATH, "//div[@id='product-refinements']//h3[@data-testid='refinement-option' and contains(text(), 'Size')]").click()
    
        # self.driver.find_element(By.XPATH, "//main[@id='maincontent']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[5]/div[1]").click()
        # self.driver.find_element(By.XPATH, "//main[@id='maincontent']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[3]/div[1]").click()
    
        # self.driver.find_element(By.XPATH, "//main[@id='maincontent']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]").click()
        # self.driver.find_element(By.XPATH, "//a[contains(text(),'Fitted')]").click()
        # self.driver.find_element(By.XPATH, "//main[@id='maincontent']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[5]/div[1]").click()
        # selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame
        time.sleep(2)
>       self.driver.find_element(By.XPATH, "//div[@id='product-refinements']//h3[@data-testid='refinement-option' and text()='Fit']").click()

test/test_underarmour.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:158: in click
    raise e
conftest.py:142: in click
    self.element.click()
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute
    return self._parent.execute(command, params)
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x105d61660>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...7ff81706018b _pthread_start + 99\\n25  libsystem_pthread.dylib             0x00007ff81705bae3 thread_start + 15\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (295, 949)
E         (Session info: chrome=128.0.6613.120)
E       Stacktrace:
E       0   undetected_chromedriver             0x0000000104f8e248 undetected_chromedriver + 5096008
E       1   undetected_chromedriver             0x0000000104f85a7a undetected_chromedriver + 5061242
E       2   undetected_chromedriver             0x0000000104b10fd0 undetected_chromedriver + 389072
E       3   undetected_chromedriver             0x0000000104b64486 undetected_chromedriver + 730246
E       4   undetected_chromedriver             0x0000000104b6238d undetected_chromedriver + 721805
E       5   undetected_chromedriver             0x0000000104b5fe47 undetected_chromedriver + 712263
E       6   undetected_chromedriver             0x0000000104b5ecf2 undetected_chromedriver + 707826
E       7   undetected_chromedriver             0x0000000104b528c6 undetected_chromedriver + 657606
E       8   undetected_chromedriver             0x0000000104b81ef2 undetected_chromedriver + 851698
E       9   undetected_chromedriver             0x0000000104b52288 undetected_chromedriver + 656008
E       10  undetected_chromedriver             0x0000000104b820ae undetected_chromedriver + 852142
E       11  undetected_chromedriver             0x0000000104b9f250 undetected_chromedriver + 971344
E       12  undetected_chromedriver             0x0000000104b81c93 undetected_chromedriver + 851091
E       13  undetected_chromedriver             0x0000000104b50c79 undetected_chromedriver + 650361
E       14  undetected_chromedriver             0x0000000104b5149e undetected_chromedriver + 652446
E       15  undetected_chromedriver             0x0000000104f50fc0 undetected_chromedriver + 4845504
E       16  undetected_chromedriver             0x0000000104f55ed8 undetected_chromedriver + 4865752
E       17  undetected_chromedriver             0x0000000104f565a5 undetected_chromedriver + 4867493
E       18  undetected_chromedriver             0x0000000104f33bf9 undetected_chromedriver + 4725753
E       19  undetected_chromedriver             0x0000000104f56899 undetected_chromedriver + 4868249
E       20  undetected_chromedriver             0x0000000104f25b14 undetected_chromedriver + 4668180
E       21  undetected_chromedriver             0x0000000104f75d78 undetected_chromedriver + 4996472
E       22  undetected_chromedriver             0x0000000104f75f77 undetected_chromedriver + 4996983
E       23  undetected_chromedriver             0x0000000104f8567e undetected_chromedriver + 5060222
E       24  libsystem_pthread.dylib             0x00007ff81706018b _pthread_start + 99
E       25  libsystem_pthread.dylib             0x00007ff81705bae3 thread_start + 15

.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException
2024-09-08 21:22:58,528 - ERROR - ElementClickInterceptedException: Element click intercepted: xpath = //div[@id='product-refinements']//h3[@data-testid='refinement-option' and text()='Fit'] - Message: element click intercepted: Element is not clickable at point (295, 949)
  (Session info: chrome=128.0.6613.120)
Stacktrace:
0   undetected_chromedriver             0x0000000104f8e248 undetected_chromedriver + 5096008
1   undetected_chromedriver             0x0000000104f85a7a undetected_chromedriver + 5061242
2   undetected_chromedriver             0x0000000104b10fd0 undetected_chromedriver + 389072
3   undetected_chromedriver             0x0000000104b64486 undetected_chromedriver + 730246
4   undetected_chromedriver             0x0000000104b6238d undetected_chromedriver + 721805
5   undetected_chromedriver             0x0000000104b5fe47 undetected_chromedriver + 712263
6   undetected_chromedriver             0x0000000104b5ecf2 undetected_chromedriver + 707826
7   undetected_chromedriver             0x0000000104b528c6 undetected_chromedriver + 657606
8   undetected_chromedriver             0x0000000104b81ef2 undetected_chromedriver + 851698
9   undetected_chromedriver             0x0000000104b52288 undetected_chromedriver + 656008
10  undetected_chromedriver             0x0000000104b820ae undetected_chromedriver + 852142
11  undetected_chromedriver             0x0000000104b9f250 undetected_chromedriver + 971344
12  undetected_chromedriver             0x0000000104b81c93 undetected_chromedriver + 851091
13  undetected_chromedriver             0x0000000104b50c79 undetected_chromedriver + 650361
14  undetected_chromedriver             0x0000000104b5149e undetected_chromedriver + 652446
15  undetected_chromedriver             0x0000000104f50fc0 undetected_chromedriver + 4845504
16  undetected_chromedriver             0x0000000104f55ed8 undetected_chromedriver + 4865752
17  undetected_chromedriver             0x0000000104f565a5 undetected_chromedriver + 4867493
18  undetected_chromedriver             0x0000000104f33bf9 undetected_chromedriver + 4725753
19  undetected_chromedriver             0x0000000104f56899 undetected_chromedriver + 4868249
20  undetected_chromedriver             0x0000000104f25b14 undetected_chromedriver + 4668180
21  undetected_chromedriver             0x0000000104f75d78 undetected_chromedriver + 4996472
22  undetected_chromedriver             0x0000000104f75f77 undetected_chromedriver + 4996983
23  undetected_chromedriver             0x0000000104f8567e undetected_chromedriver + 5060222
24  libsystem_pthread.dylib             0x00007ff81706018b _pthread_start + 99
25  libsystem_pthread.dylib             0x00007ff81705bae3 thread_start + 15

