2024-10-16 18:01:44,245 - ERROR - Test test_babycenter_6c3bb227 failed.
2024-10-16 18:01:44,248 - ERROR - URL at failure: https://registry.babycenter.com/?rm_source=navbar
2024-10-16 18:01:44,248 - ERROR - Exception: self = <test.test_babycenter.TestBabycenter object at 0x104f93700>

    def test_babycenter_6c3bb227(self):
        # self.driver.get("https://www.babycenter.com/")
        self.driver.find_element(By.XPATH, "//a[contains(text(),'Registry Builder')]").click()
        take_quiz_button = self.driver.find_element(By.XPATH, "//div[@id='__next']/div[2]/div[1]/div[3]/div[1]/div[1]/main[1]/div[2]/div[1]/button[1]/span[1]")
        scroll_to_element(self.driver, take_quiz_button)
        time.sleep(2)
        take_quiz_button_native = take_quiz_button.get_native_element()
>       take_quiz_button_native.click()

test/test_babycenter.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute
    return self._parent.execute(command, params)
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104f91a80>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...7ff80fd6018b _pthread_start + 99\\n24  libsystem_pthread.dylib             0x00007ff80fd5bae3 thread_start + 15\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class="MuiTouchRipple-root mui-style-w0pj6f"></span> is not clickable at point (520, 470). Other element would receive the click: <button class="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeMedium MuiButton-outlinedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeMedium MuiButton-outlinedSizeMedium MuiButton-colorPrimary noHoverBg mui-style-8gs7uy" tabindex="0" type="button" data-tracking-link-type="rb_nav">...</button>
E         (Session info: chrome=130.0.6723.59)
E       Stacktrace:
E       0   undetected_chromedriver             0x0000000105456a58 undetected_chromedriver + 8141400
E       1   undetected_chromedriver             0x000000010544e94a undetected_chromedriver + 8108362
E       2   undetected_chromedriver             0x0000000104cf3f60 undetected_chromedriver + 397152
E       3   undetected_chromedriver             0x0000000104d46dd6 undetected_chromedriver + 736726
E       4   undetected_chromedriver             0x0000000104d44d48 undetected_chromedriver + 728392
E       5   undetected_chromedriver             0x0000000104d42827 undetected_chromedriver + 718887
E       6   undetected_chromedriver             0x0000000104d41c5b undetected_chromedriver + 715867
E       7   undetected_chromedriver             0x0000000104d35318 undetected_chromedriver + 664344
E       8   undetected_chromedriver             0x0000000104d64782 undetected_chromedriver + 857986
E       9   undetected_chromedriver             0x0000000104d34d08 undetected_chromedriver + 662792
E       10  undetected_chromedriver             0x0000000104d6493e undetected_chromedriver + 858430
E       11  undetected_chromedriver             0x0000000104d830ce undetected_chromedriver + 983246
E       12  undetected_chromedriver             0x0000000104d64523 undetected_chromedriver + 857379
E       13  undetected_chromedriver             0x0000000104d33012 undetected_chromedriver + 655378
E       14  undetected_chromedriver             0x0000000104d33fee undetected_chromedriver + 659438
E       15  undetected_chromedriver             0x000000010541b7c0 undetected_chromedriver + 7899072
E       16  undetected_chromedriver             0x000000010541f714 undetected_chromedriver + 7915284
E       17  undetected_chromedriver             0x00000001053fd597 undetected_chromedriver + 7775639
E       18  undetected_chromedriver             0x000000010542019e undetected_chromedriver + 7917982
E       19  undetected_chromedriver             0x00000001053ec874 undetected_chromedriver + 7706740
E       20  undetected_chromedriver             0x000000010543cd98 undetected_chromedriver + 8035736
E       21  undetected_chromedriver             0x000000010543cf56 undetected_chromedriver + 8036182
E       22  undetected_chromedriver             0x000000010544e558 undetected_chromedriver + 8107352
E       23  libsystem_pthread.dylib             0x00007ff80fd6018b _pthread_start + 99
E       24  libsystem_pthread.dylib             0x00007ff80fd5bae3 thread_start + 15

.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException
