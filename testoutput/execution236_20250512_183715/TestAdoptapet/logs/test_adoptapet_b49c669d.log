2025-05-12 18:37:28,276 - ERROR - Test test_adoptapet_b49c669d failed.
2025-05-12 18:37:28,280 - ERROR - URL at failure: https://www.adoptapet.com/dog-adoption
2025-05-12 18:37:28,280 - ERROR - Exception traceback: self = <test.test_adoptapet.TestAdoptapet object at 0x10414f4f0>

    def test_adoptapet_b49c669d(self):
        self.driver.get("https://adoptapet.com")
    
        # self.driver.find_element(By.XPATH, "//span[contains(text(),'Find a pet')]").click()
        self.driver.find_element(By.XPATH, "//span[@title='Find a Pet']").click()
    
        # self.driver.find_element(By.XPATH, "//a[contains(text(),'Find a dog')]").click()
        self.driver.find_element(By.XPATH, "//span[contains(text(),'Find a dog')]").click()
    
        time.sleep(1)
    
        # breed_element = self.driver.find_element(By.ID, "location-1")
        # scroll_to_element(self.driver, breed_element)
        # self.driver.find_element(By.ID, "location-1").clear()
        # self.driver.find_element(By.ID, "location-1").send_keys("10019")
        breed_element = self.driver.find_element(By.ID, "location")
        scroll_to_element(self.driver, breed_element)
>       self.driver.find_element(By.ID, "location").clear()

test/test_adoptapet.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:117: in clear
    self._execute(Command.CLEAR_ELEMENT)
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute
    return self._parent.execute(command, params)
.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10414d360>
response = {'status': 400, 'value': '{"value":{"error":"element not interactable","message":"element not interactable\\n  (Sessio...7ff811008df1 _pthread_start + 99\\n20  libsystem_pthread.dylib             0x00007ff811004857 thread_start + 15\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
E         (Session info: chrome=136.0.7103.93)
E       Stacktrace:
E       0   undetected_chromedriver             0x0000000102ba68b8 undetected_chromedriver + 5986488
E       1   undetected_chromedriver             0x0000000102b9d9ea undetected_chromedriver + 5949930
E       2   undetected_chromedriver             0x0000000102656443 undetected_chromedriver + 414787
E       3   undetected_chromedriver             0x000000010269e842 undetected_chromedriver + 710722
E       4   undetected_chromedriver             0x00000001026ce312 undetected_chromedriver + 906002
E       5   undetected_chromedriver             0x000000010269bda8 undetected_chromedriver + 699816
E       6   undetected_chromedriver             0x00000001026ce4ce undetected_chromedriver + 906446
E       7   undetected_chromedriver             0x00000001026f5566 undetected_chromedriver + 1066342
E       8   undetected_chromedriver             0x00000001026ce0e3 undetected_chromedriver + 905443
E       9   undetected_chromedriver             0x000000010269a61d undetected_chromedriver + 693789
E       10  undetected_chromedriver             0x000000010269b281 undetected_chromedriver + 696961
E       11  undetected_chromedriver             0x0000000102b64580 undetected_chromedriver + 5715328
E       12  undetected_chromedriver             0x0000000102b68445 undetected_chromedriver + 5731397
E       13  undetected_chromedriver             0x0000000102b3eed0 undetected_chromedriver + 5562064
E       14  undetected_chromedriver             0x0000000102b68e7b undetected_chromedriver + 5734011
E       15  undetected_chromedriver             0x0000000102b2dde4 undetected_chromedriver + 5492196
E       16  undetected_chromedriver             0x0000000102b8ba98 undetected_chromedriver + 5876376
E       17  undetected_chromedriver             0x0000000102b8bc60 undetected_chromedriver + 5876832
E       18  undetected_chromedriver             0x0000000102b9d5b1 undetected_chromedriver + 5948849
E       19  libsystem_pthread.dylib             0x00007ff811008df1 _pthread_start + 99
E       20  libsystem_pthread.dylib             0x00007ff811004857 thread_start + 15

.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException
2025-05-12 18:37:20,973 - INFO - Attempting to navigate to URL: https://adoptapet.com
2025-05-12 18:37:21,457 - INFO - Successfully navigated to URL: https://adoptapet.com
2025-05-12 18:37:25,224 - INFO - Attempting to find element: xpath = //span[@title='Find a Pet']
2025-05-12 18:37:25,248 - INFO - Successfully find element: xpath = //span[@title='Find a Pet']
2025-05-12 18:37:25,249 - INFO - Attempting to click element: xpath = //span[@title='Find a Pet']
2025-05-12 18:37:25,249 - INFO - Attempting to find element: xpath = //span[@title='Find a Pet']
2025-05-12 18:37:25,256 - INFO - Successfully find element: xpath = //span[@title='Find a Pet']
2025-05-12 18:37:25,310 - INFO - Element clicked: xpath = //span[@title='Find a Pet']
2025-05-12 18:37:25,310 - INFO - Attempting to find element: xpath = //span[contains(text(),'Find a dog')]
2025-05-12 18:37:25,317 - INFO - Successfully find element: xpath = //span[contains(text(),'Find a dog')]
2025-05-12 18:37:25,317 - INFO - Attempting to click element: xpath = //span[contains(text(),'Find a dog')]
2025-05-12 18:37:25,318 - INFO - Attempting to find element: xpath = //span[contains(text(),'Find a dog')]
2025-05-12 18:37:25,322 - INFO - Successfully find element: xpath = //span[contains(text(),'Find a dog')]
2025-05-12 18:37:25,368 - INFO - Element clicked: xpath = //span[contains(text(),'Find a dog')]
2025-05-12 18:37:26,374 - INFO - Attempting to find element: id = location
2025-05-12 18:37:26,388 - INFO - Successfully find element: id = location
2025-05-12 18:37:27,397 - INFO - Attempting to find element: id = location
2025-05-12 18:37:27,407 - INFO - Successfully find element: id = location
2025-05-12 18:37:49,952 - INFO - GPT suggestions:
-------------------------------------------------------
Potential fix (1): Click the wrapper first and type into the now-visible field instead of the permanently “hidden” #location input
Original code line/lines: 
breed_element = self.driver.find_element(By.ID, "location")
scroll_to_element(self.driver, breed_element)
self.driver.find_element(By.ID, "location").clear()
self.driver.find_element(By.ID, "location").send_keys("10019")
Fixed code line/lines: 
wrapper = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='location-search']")
scroll_to_element(self.driver, wrapper)
wrapper.click()                                   # activates the real input
location_input = self.driver.find_element(By.CSS_SELECTOR, "[data-testid='location-search'] input:not(.hidden)")
location_input.clear()
location_input.send_keys("10019")
-------------------------------------------------------
Potential fix (2): Switch to a locator that only grabs the visible, editable input
Original code line/lines: 
breed_element = self.driver.find_element(By.ID, "location")
Fixed code line/lines: 
breed_element = self.driver.find_element(By.XPATH, "//div[@data-testid='location-search']//input[not(contains(@class,'hidden'))]")
-------------------------------------------------------
Potential fix (3): Remove the “hidden” class via JS before clearing/sending keys
Original code line/lines: 
self.driver.find_element(By.ID, "location").clear()
self.driver.find_element(By.ID, "location").send_keys("10019")
Fixed code line/lines: 
loc_elem = self.driver.find_element(By.ID, "location")
self.driver.execute_script("arguments[0].classList.remove('hidden');", loc_elem)
loc_elem.clear()
loc_elem.send_keys("10019")
-------------------------------------------------------
Potential fix (4): Use Ctrl+A + Delete instead of .clear() (bypasses ElementNotInteractable for hidden inputs)
Original code line/lines: 
self.driver.find_element(By.ID, "location").clear()
Fixed code line/lines: 
from selenium.webdriver.common.keys import Keys
input_elem = self.driver.find_element(By.ID, "location")
input_elem.send_keys(Keys.CONTROL, "a", Keys.DELETE)
-------------------------------------------------------
Potential fix (5): Wait until the input becomes clickable after wrapper click
Original code line/lines: 
self.driver.find_element(By.ID, "location").clear()
Fixed code line/lines: 
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
WebDriverWait(self.driver, 5).until(EC.element_to_be_clickable((By.ID, "location"))).clear()
-------------------------------------------------------
